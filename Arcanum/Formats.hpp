/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef LDL_Arcanum_Formats_hpp
#define LDL_Arcanum_Formats_hpp

#include "Types.hpp"
#include "Structs.hpp"
#include <stdio.h>

struct ArtColor
{
	ArtColor();
	uint8_t b;
	uint8_t	g;
	uint8_t	r;
	uint8_t	a;
};

inline bool in_palette(ArtColor col)
{
	return (col.a | col.b | col.g | col.r) != 0;
}

struct ArtTable
{
	ArtColor colors[256];
};

struct ArtHeader
{
	void Clear();
	uint32_t h0[3];
	ArtColor stupid_color[4];
	uint32_t frame_num_low;
	uint32_t frame_num;
	ArtColor palette_data1[8];
	ArtColor palette_data2[8];
	ArtColor palette_data3[8];
};

struct ArtFrameHeader
{
	enum
	{
		Max = 8 * 16
	};

	ArtFrameHeader();
	uint32_t width;
	uint32_t height;
	uint32_t size;
	uint32_t c_x;
	uint32_t c_y;
	uint32_t d_x;
	uint32_t d_y;
};

struct ArtFrame
{
	enum
	{
		Max = 256 * 100
	};

	ArtFrameHeader _Header;
	uint8_t _Pixels[ArtFrame::Max];
};

class ArtFile
{
public:
	void Clear();
	bool Load(const char* name);
	size_t Frames();
	void Frame(ArtFrame *frame);
private:
	bool Inc(ArtFrame* frame);
	void Dec(ArtFrame* frame);
	void Decode(ArtFrame* frame);
	size_t Index(ArtFrame* frame, int x, int y);
	FILE* _File;
	int _Palettes;
	int _Frames;
	int _KeyFrame;
	bool _Animated;
	ArtHeader       _Header;
	ArtFrameHeader  _FrameHeaders[ArtFrameHeader::Max];
	ArtTable        _PaletteData[3];
	uint8_t      data[ArtFrame::Max];
	int px;
	int py;
};

#endif