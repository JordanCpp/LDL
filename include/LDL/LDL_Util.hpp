/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef LDL_Util_hpp
#define LDL_Util_hpp

#include <stdio.h>

typedef void(*LDL_VoidFuncPtr)(void);

void LDL_Abort(const char* message, const char* detail)
{
	printf("%s %s/n", message, detail);
	abort();
}

#if defined(_WIN32)
#include <windows.h>

size_t LDL_Ticks()
{
	return timeGetTime();
}

void LDL_Delay(size_t count)
{
	Sleep((DWORD)count);
}

class LDL_Library
{
public:
	bool Open(const char* path)
	{
		Close();

		_HMODULE = LoadLibrary(path);

		return _HMODULE != NULL;
	}

	void Close()
	{
		if (_HMODULE != NULL)
		{
			FreeLibrary(_HMODULE);
		}
	}

	~LDL_Library()
	{
		Close();
	}

	LDL_VoidFuncPtr Function(const char* name)
	{
		return (LDL_VoidFuncPtr)GetProcAddress(_HMODULE, name);
	}
private:
	HMODULE _HMODULE;
};

class LDL_OpenGLFunctions
{
public:
	LDL_OpenGLFunctions()
	{
		_Library.Open("opengl32.dll");
	}

	~LDL_OpenGLFunctions()
	{
		_Library.Close();
	}

	LDL_VoidFuncPtr Function(const char* name)
	{
		LDL_VoidFuncPtr result = (LDL_VoidFuncPtr)wglGetProcAddress(name);

		if (IsValid(result))
		{
			result = _Library.Function(name);

			if (result == NULL)
			{
				LDL_Abort("Not found function:", name);
			}
		}

		return result;
	}
private:
	bool IsValid(LDL_VoidFuncPtr ptr)
	{
		return (ptr == 0 || (ptr == (LDL_VoidFuncPtr)0x1) || (ptr == (LDL_VoidFuncPtr)0x2) || (ptr == (LDL_VoidFuncPtr)0x3) || (ptr == (LDL_VoidFuncPtr)-1));
	}

	LDL_Library _Library;
};

#endif

class LDL_FpsCounter
{
public:
	LDL_FpsCounter() :
		_Current(0),
		_Delta(0),
		_Old(0),
		_Fps(0)
	{
	}

	void Start()
	{
		_Current = LDL_Ticks();
	}

	bool Calc()
	{
		_Fps++;

		_Delta = LDL_Ticks() - _Current;

		_Old += _Delta;

		if (_Old >= 1000)
		{
			return  true;
		}

		return false;
	}

	size_t Fps()
	{
		return _Fps;
	}

	void Clear()
	{
		_Fps = 0;
		_Old = 0;
	}
private:
	size_t _Current;
	size_t	_Delta;
	size_t	_Old;
	size_t _Fps;
};

class LDL_FpsLimiter
{
public:
	LDL_FpsLimiter(size_t fps = 60) :
		_Fps(fps),
		_Ticks(0)
	{
	}

	void Mark()
	{
		_Ticks = LDL_Ticks();
	}

	void Throttle() const
	{
		if (1000 / _Fps > LDL_Ticks() - _Ticks)
		{
			LDL_Delay(1000 / _Fps - (LDL_Ticks() - _Ticks));
		}
	}
private:
	size_t _Fps;
	size_t _Ticks;
};

#endif
