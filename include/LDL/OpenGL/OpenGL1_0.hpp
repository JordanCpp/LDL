#ifndef LDL_OpenGL_OpenGL1_0_hpp
#define LDL_OpenGL_OpenGL1_0_hpp

#include <LDL/OpenGL/OpenGLTypes.hpp>

typedef	void	(pglAccum)(GLenum	op, GLfloat	value);
typedef	void	(pglAlphaFunc)(GLenum	func, GLclampf	ref);
typedef	GLboolean(pglAreTexturesResident)	(GLsizei	n, const	GLuint* textures, GLboolean* residences);
typedef	void	(pglArrayElement)(GLint	i);
typedef	void	(pglBegin)(GLenum	mode);
typedef	void	(pglBindTexture)(GLenum	target, GLuint	texture);
typedef	void	(pglBitmap)(GLsizei	width, GLsizei	height, GLfloat	xorig, GLfloat	yorig, GLfloat	xmove, GLfloat	ymove, const	GLubyte* bitmap);
typedef	void	(pglBlendFunc)(GLenum	sfactor, GLenum	dfactor);
typedef	void	(pglCallList)(GLuint	list);
typedef	void	(pglCallLists)(GLsizei	n, GLenum	type, const	GLvoid* lists);
typedef	void	(pglClear)(GLbitfield	mask);
typedef	void	(pglClearAccum)(GLfloat	red, GLfloat	green, GLfloat	blue, GLfloat	alpha);
typedef	void	(pglClearColor)(GLclampf	red, GLclampf	green, GLclampf	blue, GLclampf	alpha);
typedef	void	(pglClearDepth)(GLclampd	depth);
typedef	void	(pglClearIndex)(GLfloat	c);
typedef	void	(pglClearStencil)(GLint	s);
typedef	void	(pglClipPlane)(GLenum	plane, const	GLdouble* equation);
typedef	void	(pglColor3b)(GLbyte	red, GLbyte	green, GLbyte	blue);
typedef	void	(pglColor3bv)(const	GLbyte* v);
typedef	void	(pglColor3d)(GLdouble	red, GLdouble	green, GLdouble	blue);
typedef	void	(pglColor3dv)(const	GLdouble* v);
typedef	void	(pglColor3f)(GLfloat	red, GLfloat	green, GLfloat	blue);
typedef	void	(pglColor3fv)(const	GLfloat* v);
typedef	void	(pglColor3i)(GLint	red, GLint	green, GLint	blue);
typedef	void	(pglColor3iv)(const	GLint* v);
typedef	void	(pglColor3s)(GLshort	red, GLshort	green, GLshort	blue);
typedef	void	(pglColor3sv)(const	GLshort* v);
typedef	void	(pglColor3ub)(GLubyte	red, GLubyte	green, GLubyte	blue);
typedef	void	(pglColor3ubv)(const	GLubyte* v);
typedef	void	(pglColor3ui)(GLuint	red, GLuint	green, GLuint	blue);
typedef	void	(pglColor3uiv)(const	GLuint* v);
typedef	void	(pglColor3us)(GLushort	red, GLushort	green, GLushort	blue);
typedef	void	(pglColor3usv)(const	GLushort* v);
typedef	void	(pglColor4b)(GLbyte	red, GLbyte	green, GLbyte	blue, GLbyte	alpha);
typedef	void	(pglColor4bv)(const	GLbyte* v);
typedef	void	(pglColor4d)(GLdouble	red, GLdouble	green, GLdouble	blue, GLdouble	alpha);
typedef	void	(pglColor4dv)(const	GLdouble* v);
typedef	void	(pglColor4f)(GLfloat	red, GLfloat	green, GLfloat	blue, GLfloat	alpha);
typedef	void	(pglColor4fv)(const	GLfloat* v);
typedef	void	(pglColor4i)(GLint	red, GLint	green, GLint	blue, GLint	alpha);
typedef	void	(pglColor4iv)(const	GLint* v);
typedef	void	(pglColor4s)(GLshort	red, GLshort	green, GLshort	blue, GLshort	alpha);
typedef	void	(pglColor4sv)(const	GLshort* v);
typedef	void	(pglColor4ub)(GLubyte	red, GLubyte	green, GLubyte	blue, GLubyte	alpha);
typedef	void	(pglColor4ubv)(const	GLubyte* v);
typedef	void	(pglColor4ui)(GLuint	red, GLuint	green, GLuint	blue, GLuint	alpha);
typedef	void	(pglColor4uiv)(const	GLuint* v);
typedef	void	(pglColor4us)(GLushort	red, GLushort	green, GLushort	blue, GLushort	alpha);
typedef	void	(pglColor4usv)(const	GLushort* v);
typedef	void	(pglColorMask)(GLboolean	red, GLboolean	green, GLboolean	blue, GLboolean	alpha);
typedef	void	(pglColorMaterial)(GLenum	face, GLenum	mode);
typedef	void	(pglColorPointer)(GLint	size, GLenum	type, GLsizei	stride, const	GLvoid* pointer);
typedef	void	(pglCopyPixels)(GLint	x, GLint	y, GLsizei	width, GLsizei	height, GLenum	type);
typedef	void	(pglCopyTexImage1D)(GLenum	target, GLint	level, GLenum	internalFormat, GLint	x, GLint	y, GLsizei	width, GLint	border);
typedef	void	(pglCopyTexImage2D)(GLenum	target, GLint	level, GLenum	internalFormat, GLint	x, GLint	y, GLsizei	width, GLsizei	height, GLint	border);
typedef	void	(pglCopyTexSubImage1D)(GLenum	target, GLint	level, GLint	xoffset, GLint	x, GLint	y, GLsizei	width);
typedef	void	(pglCopyTexSubImage2D)(GLenum	target, GLint	level, GLint	xoffset, GLint	yoffset, GLint	x, GLint	y, GLsizei	width, GLsizei	height);
typedef	void	(pglCullFace)(GLenum	mode);
typedef	void	(pglDeleteLists)(GLuint	list, GLsizei	range);
typedef	void	(pglDeleteTextures)(GLsizei	n, const	GLuint* textures);
typedef	void	(pglDepthFunc)(GLenum	func);
typedef	void	(pglDepthMask)(GLboolean	flag);
typedef	void	(pglDepthRange)(GLclampd	zNear, GLclampd	zFar);
typedef	void	(pglDisable)(GLenum	cap);
typedef	void	(pglDisableClientState)(GLenum	array);
typedef	void	(pglDrawArrays)(GLenum	mode, GLint	first, GLsizei	count);
typedef	void	(pglDrawBuffer)(GLenum	mode);
typedef	void	(pglDrawElements)(GLenum	mode, GLsizei	count, GLenum	type, const	GLvoid* indices);
typedef	void	(pglDrawPixels)(GLsizei	width, GLsizei	height, GLenum	format, GLenum	type, const	GLvoid* pixels);
typedef	void	(pglEdgeFlag)(GLboolean	flag);
typedef	void	(pglEdgeFlagPointer)(GLsizei	stride, const	GLvoid* pointer);
typedef	void	(pglEdgeFlagv)(const	GLboolean* flag);
typedef	void	(pglEnable)(GLenum	cap);
typedef	void	(pglEnableClientState)(GLenum	array);
typedef	void	(pglEnd)(void);
typedef	void	(pglEndList)(void);
typedef	void	(pglEvalCoord1d)(GLdouble	u);
typedef	void	(pglEvalCoord1dv)(const	GLdouble* u);
typedef	void	(pglEvalCoord1f)(GLfloat	u);
typedef	void	(pglEvalCoord1fv)(const	GLfloat* u);
typedef	void	(pglEvalCoord2d)(GLdouble	u, GLdouble	v);
typedef	void	(pglEvalCoord2dv)(const	GLdouble* u);
typedef	void	(pglEvalCoord2f)(GLfloat	u, GLfloat	v);
typedef	void	(pglEvalCoord2fv)(const	GLfloat* u);
typedef	void	(pglEvalMesh1)(GLenum	mode, GLint	i1, GLint	i2);
typedef	void	(pglEvalMesh2)(GLenum	mode, GLint	i1, GLint	i2, GLint	j1, GLint	j2);
typedef	void	(pglEvalPoint1)(GLint	i);
typedef	void	(pglEvalPoint2)(GLint	i, GLint	j);
typedef	void	(pglFeedbackBuffer)(GLsizei	size, GLenum	type, GLfloat* buffer);
typedef	void	(pglFinish)(void);
typedef	void	(pglFlush)(void);
typedef	void	(pglFogf)(GLenum	pname, GLfloat	param);
typedef	void	(pglFogfv)(GLenum	pname, const	GLfloat* params);
typedef	void	(pglFogi)(GLenum	pname, GLint	param);
typedef	void	(pglFogiv)(GLenum	pname, const	GLint* params);
typedef	void	(pglFrontFace)(GLenum	mode);
typedef	void	(pglFrustum)(GLdouble	left, GLdouble	right, GLdouble	bottom, GLdouble	top, GLdouble	zNear, GLdouble	zFar);
typedef	GLuint(pglGenLists)	(GLsizei	range);
typedef	void	(pglGenTextures)(GLsizei	n, GLuint* textures);
typedef	void	(pglGetBooleanv)(GLenum	pname, GLboolean* params);
typedef	void	(pglGetClipPlane)(GLenum	plane, GLdouble* equation);
typedef	void	(pglGetDoublev)(GLenum	pname, GLdouble* params);
typedef	GLenum(pglGetError)	(void);
typedef	void	(pglGetFloatv)(GLenum	pname, GLfloat* params);
typedef	void	(pglGetIntegerv)(GLenum	pname, GLint* params);
typedef	void	(pglGetLightfv)(GLenum	light, GLenum	pname, GLfloat* params);
typedef	void	(pglGetLightiv)(GLenum	light, GLenum	pname, GLint* params);
typedef	void	(pglGetMapdv)(GLenum	target, GLenum	query, GLdouble* v);
typedef	void	(pglGetMapfv)(GLenum	target, GLenum	query, GLfloat* v);
typedef	void	(pglGetMapiv)(GLenum	target, GLenum	query, GLint* v);
typedef	void	(pglGetMaterialfv)(GLenum	face, GLenum	pname, GLfloat* params);
typedef	void	(pglGetMaterialiv)(GLenum	face, GLenum	pname, GLint* params);
typedef	void	(pglGetPixelMapfv)(GLenum	map, GLfloat* values);
typedef	void	(pglGetPixelMapuiv)(GLenum	map, GLuint* values);
typedef	void	(pglGetPixelMapusv)(GLenum	map, GLushort* values);
typedef	void	(pglGetPointerv)(GLenum	pname, GLvoid** params);
typedef	void	(pglGetPolygonStipple)(GLubyte* mask);
typedef	const GLubyte* (pglGetString)(GLenum name);
typedef	void	(pglGetTexEnvfv)(GLenum	target, GLenum	pname, GLfloat* params);
typedef	void	(pglGetTexEnviv)(GLenum	target, GLenum	pname, GLint* params);
typedef	void	(pglGetTexGendv)(GLenum	coord, GLenum	pname, GLdouble* params);
typedef	void	(pglGetTexGenfv)(GLenum	coord, GLenum	pname, GLfloat* params);
typedef	void	(pglGetTexGeniv)(GLenum	coord, GLenum	pname, GLint* params);
typedef	void	(pglGetTexImage)(GLenum	target, GLint	level, GLenum	format, GLenum	type, GLvoid* pixels);
typedef	void	(pglGetTexLevelParameterfv)(GLenum	target, GLint	level, GLenum	pname, GLfloat* params);
typedef	void	(pglGetTexLevelParameteriv)(GLenum	target, GLint	level, GLenum	pname, GLint* params);
typedef	void	(pglGetTexParameterfv)(GLenum	target, GLenum	pname, GLfloat* params);
typedef	void	(pglGetTexParameteriv)(GLenum	target, GLenum	pname, GLint* params);
typedef	void	(pglHint)(GLenum	target, GLenum	mode);
typedef	void	(pglIndexMask)(GLuint	mask);
typedef	void	(pglIndexPointer)(GLenum	type, GLsizei	stride, const	GLvoid* pointer);
typedef	void	(pglIndexd)(GLdouble	c);
typedef	void	(pglIndexdv)(const	GLdouble* c);
typedef	void	(pglIndexf)(GLfloat	c);
typedef	void	(pglIndexfv)(const	GLfloat* c);
typedef	void	(pglIndexi)(GLint	c);
typedef	void	(pglIndexiv)(const	GLint* c);
typedef	void	(pglIndexs)(GLshort	c);
typedef	void	(pglIndexsv)(const	GLshort* c);
typedef	void	(pglIndexub)(GLubyte	c);
typedef	void	(pglIndexubv)(const	GLubyte* c);
typedef	void	(pglInitNames)(void);
typedef	void	(pglInterleavedArrays)(GLenum	format, GLsizei	stride, const	GLvoid* pointer);
typedef	GLboolean(pglIsEnabled)	(GLenum	cap);
typedef	GLboolean(pglIsList)	(GLuint	list);
typedef	GLboolean(pglIsTexture)	(GLuint	texture);
typedef	void	(pglLightModelf)(GLenum	pname, GLfloat	param);
typedef	void	(pglLightModelfv)(GLenum	pname, const	GLfloat* params);
typedef	void	(pglLightModeli)(GLenum	pname, GLint	param);
typedef	void	(pglLightModeliv)(GLenum	pname, const	GLint* params);
typedef	void	(pglLightf)(GLenum	light, GLenum	pname, GLfloat	param);
typedef	void	(pglLightfv)(GLenum	light, GLenum	pname, const	GLfloat* params);
typedef	void	(pglLighti)(GLenum	light, GLenum	pname, GLint	param);
typedef	void	(pglLightiv)(GLenum	light, GLenum	pname, const	GLint* params);
typedef	void	(pglLineStipple)(GLint	factor, GLushort	pattern);
typedef	void	(pglLineWidth)(GLfloat	width);
typedef	void	(pglListBase)(GLuint	base);
typedef	void	(pglLoadIdentity)(void);
typedef	void	(pglLoadMatrixd)(const	GLdouble* m);
typedef	void	(pglLoadMatrixf)(const	GLfloat* m);
typedef	void	(pglLoadName)(GLuint	name);
typedef	void	(pglLogicOp)(GLenum	opcode);
typedef	void	(pglMap1d)(GLenum	target, GLdouble	u1, GLdouble	u2, GLint	stride, GLint	order, const	GLdouble* points);
typedef	void	(pglMap1f)(GLenum	target, GLfloat	u1, GLfloat	u2, GLint	stride, GLint	order, const	GLfloat* points);
typedef	void	(pglMap2d)(GLenum	target, GLdouble	u1, GLdouble	u2, GLint	ustride, GLint	uorder, GLdouble	v1, GLdouble	v2, GLint	vstride, GLint	vorder, const	GLdouble* points);
typedef	void	(pglMap2f)(GLenum	target, GLfloat	u1, GLfloat	u2, GLint	ustride, GLint	uorder, GLfloat	v1, GLfloat	v2, GLint	vstride, GLint	vorder, const	GLfloat* points);
typedef	void	(pglMapGrid1d)(GLint	un, GLdouble	u1, GLdouble	u2);
typedef	void	(pglMapGrid1f)(GLint	un, GLfloat	u1, GLfloat	u2);
typedef	void	(pglMapGrid2d)(GLint	un, GLdouble	u1, GLdouble	u2, GLint	vn, GLdouble	v1, GLdouble	v2);
typedef	void	(pglMapGrid2f)(GLint	un, GLfloat	u1, GLfloat	u2, GLint	vn, GLfloat	v1, GLfloat	v2);
typedef	void	(pglMaterialf)(GLenum	face, GLenum	pname, GLfloat	param);
typedef	void	(pglMaterialfv)(GLenum	face, GLenum	pname, const	GLfloat* params);
typedef	void	(pglMateriali)(GLenum	face, GLenum	pname, GLint	param);
typedef	void	(pglMaterialiv)(GLenum	face, GLenum	pname, const	GLint* params);
typedef	void	(pglMatrixMode)(GLenum	mode);
typedef	void	(pglMultMatrixd)(const	GLdouble* m);
typedef	void	(pglMultMatrixf)(const	GLfloat* m);
typedef	void	(pglNewList)(GLuint	list, GLenum	mode);
typedef	void	(pglNormal3b)(GLbyte	nx, GLbyte	ny, GLbyte	nz);
typedef	void	(pglNormal3bv)(const	GLbyte* v);
typedef	void	(pglNormal3d)(GLdouble	nx, GLdouble	ny, GLdouble	nz);
typedef	void	(pglNormal3dv)(const	GLdouble* v);
typedef	void	(pglNormal3f)(GLfloat	nx, GLfloat	ny, GLfloat	nz);
typedef	void	(pglNormal3fv)(const	GLfloat* v);
typedef	void	(pglNormal3i)(GLint	nx, GLint	ny, GLint	nz);
typedef	void	(pglNormal3iv)(const	GLint* v);
typedef	void	(pglNormal3s)(GLshort	nx, GLshort	ny, GLshort	nz);
typedef	void	(pglNormal3sv)(const	GLshort* v);
typedef	void	(pglNormalPointer)(GLenum	type, GLsizei	stride, const	GLvoid* pointer);
typedef	void	(pglOrtho)(GLdouble	left, GLdouble	right, GLdouble	bottom, GLdouble	top, GLdouble	zNear, GLdouble	zFar);
typedef	void	(pglPassThrough)(GLfloat	token);
typedef	void	(pglPixelMapfv)(GLenum	map, GLsizei	mapsize, const	GLfloat* values);
typedef	void	(pglPixelMapuiv)(GLenum	map, GLsizei	mapsize, const	GLuint* values);
typedef	void	(pglPixelMapusv)(GLenum	map, GLsizei	mapsize, const	GLushort* values);
typedef	void	(pglPixelStoref)(GLenum	pname, GLfloat	param);
typedef	void	(pglPixelStorei)(GLenum	pname, GLint	param);
typedef	void	(pglPixelTransferf)(GLenum	pname, GLfloat	param);
typedef	void	(pglPixelTransferi)(GLenum	pname, GLint	param);
typedef	void	(pglPixelZoom)(GLfloat	xfactor, GLfloat	yfactor);
typedef	void	(pglPointSize)(GLfloat	size);
typedef	void	(pglPolygonMode)(GLenum	face, GLenum	mode);
typedef	void	(pglPolygonOffset)(GLfloat	factor, GLfloat	units);
typedef	void	(pglPolygonStipple)(const	GLubyte* mask);
typedef	void	(pglPopAttrib)(void);
typedef	void	(pglPopClientAttrib)(void);
typedef	void	(pglPopMatrix)(void);
typedef	void	(pglPopName)(void);
typedef	void	(pglPrioritizeTextures)(GLsizei	n, const	GLuint* textures, const	GLclampf* priorities);
typedef	void	(pglPushAttrib)(GLbitfield	mask);
typedef	void	(pglPushClientAttrib)(GLbitfield	mask);
typedef	void	(pglPushMatrix)(void);
typedef	void	(pglPushName)(GLuint	name);
typedef	void	(pglRasterPos2d)(GLdouble	x, GLdouble	y);
typedef	void	(pglRasterPos2dv)(const	GLdouble* v);
typedef	void	(pglRasterPos2f)(GLfloat	x, GLfloat	y);
typedef	void	(pglRasterPos2fv)(const	GLfloat* v);
typedef	void	(pglRasterPos2i)(GLint	x, GLint	y);
typedef	void	(pglRasterPos2iv)(const	GLint* v);
typedef	void	(pglRasterPos2s)(GLshort	x, GLshort	y);
typedef	void	(pglRasterPos2sv)(const	GLshort* v);
typedef	void	(pglRasterPos3d)(GLdouble	x, GLdouble	y, GLdouble	z);
typedef	void	(pglRasterPos3dv)(const	GLdouble* v);
typedef	void	(pglRasterPos3f)(GLfloat	x, GLfloat	y, GLfloat	z);
typedef	void	(pglRasterPos3fv)(const	GLfloat* v);
typedef	void	(pglRasterPos3i)(GLint	x, GLint	y, GLint	z);
typedef	void	(pglRasterPos3iv)(const	GLint* v);
typedef	void	(pglRasterPos3s)(GLshort	x, GLshort	y, GLshort	z);
typedef	void	(pglRasterPos3sv)(const	GLshort* v);
typedef	void	(pglRasterPos4d)(GLdouble	x, GLdouble	y, GLdouble	z, GLdouble	w);
typedef	void	(pglRasterPos4dv)(const	GLdouble* v);
typedef	void	(pglRasterPos4f)(GLfloat	x, GLfloat	y, GLfloat	z, GLfloat	w);
typedef	void	(pglRasterPos4fv)(const	GLfloat* v);
typedef	void	(pglRasterPos4i)(GLint	x, GLint	y, GLint	z, GLint	w);
typedef	void	(pglRasterPos4iv)(const	GLint* v);
typedef	void	(pglRasterPos4s)(GLshort	x, GLshort	y, GLshort	z, GLshort	w);
typedef	void	(pglRasterPos4sv)(const	GLshort* v);
typedef	void	(pglReadBuffer)(GLenum	mode);
typedef	void	(pglReadPixels)(GLint	x, GLint	y, GLsizei	width, GLsizei	height, GLenum	format, GLenum	type, GLvoid* pixels);
typedef	void	(pglRectd)(GLdouble	x1, GLdouble	y1, GLdouble	x2, GLdouble	y2);
typedef	void	(pglRectdv)(const	GLdouble* v1, const	GLdouble* v2);
typedef	void	(pglRectf)(GLfloat	x1, GLfloat	y1, GLfloat	x2, GLfloat	y2);
typedef	void	(pglRectfv)(const	GLfloat* v1, const	GLfloat* v2);
typedef	void	(pglRecti)(GLint	x1, GLint	y1, GLint	x2, GLint	y2);
typedef	void	(pglRectiv)(const	GLint* v1, const	GLint* v2);
typedef	void	(pglRects)(GLshort	x1, GLshort	y1, GLshort	x2, GLshort	y2);
typedef	void	(pglRectsv)(const	GLshort* v1, const	GLshort* v2);
typedef	GLint(pglRenderMode)	(GLenum	mode);
typedef	void	(pglRotated)(GLdouble	angle, GLdouble	x, GLdouble	y, GLdouble	z);
typedef	void	(pglRotatef)(GLfloat	angle, GLfloat	x, GLfloat	y, GLfloat	z);
typedef	void	(pglScaled)(GLdouble	x, GLdouble	y, GLdouble	z);
typedef	void	(pglScalef)(GLfloat	x, GLfloat	y, GLfloat	z);
typedef	void	(pglScissor)(GLint	x, GLint	y, GLsizei	width, GLsizei	height);
typedef	void	(pglSelectBuffer)(GLsizei	size, GLuint* buffer);
typedef	void	(pglShadeModel)(GLenum	mode);
typedef	void	(pglStencilFunc)(GLenum	func, GLint	ref, GLuint	mask);
typedef	void	(pglStencilMask)(GLuint	mask);
typedef	void	(pglStencilOp)(GLenum	fail, GLenum	zfail, GLenum	zpass);
typedef	void	(pglTexCoord1d)(GLdouble	s);
typedef	void	(pglTexCoord1dv)(const	GLdouble* v);
typedef	void	(pglTexCoord1f)(GLfloat	s);
typedef	void	(pglTexCoord1fv)(const	GLfloat* v);
typedef	void	(pglTexCoord1i)(GLint	s);
typedef	void	(pglTexCoord1iv)(const	GLint* v);
typedef	void	(pglTexCoord1s)(GLshort	s);
typedef	void	(pglTexCoord1sv)(const	GLshort* v);
typedef	void	(pglTexCoord2d)(GLdouble	s, GLdouble	t);
typedef	void	(pglTexCoord2dv)(const	GLdouble* v);
typedef	void	(pglTexCoord2f)(GLfloat	s, GLfloat	t);
typedef	void	(pglTexCoord2fv)(const	GLfloat* v);
typedef	void	(pglTexCoord2i)(GLint	s, GLint	t);
typedef	void	(pglTexCoord2iv)(const	GLint* v);
typedef	void	(pglTexCoord2s)(GLshort	s, GLshort	t);
typedef	void	(pglTexCoord2sv)(const	GLshort* v);
typedef	void	(pglTexCoord3d)(GLdouble	s, GLdouble	t, GLdouble	r);
typedef	void	(pglTexCoord3dv)(const	GLdouble* v);
typedef	void	(pglTexCoord3f)(GLfloat	s, GLfloat	t, GLfloat	r);
typedef	void	(pglTexCoord3fv)(const	GLfloat* v);
typedef	void	(pglTexCoord3i)(GLint	s, GLint	t, GLint	r);
typedef	void	(pglTexCoord3iv)(const	GLint* v);
typedef	void	(pglTexCoord3s)(GLshort	s, GLshort	t, GLshort	r);
typedef	void	(pglTexCoord3sv)(const	GLshort* v);
typedef	void	(pglTexCoord4d)(GLdouble	s, GLdouble	t, GLdouble	r, GLdouble	q);
typedef	void	(pglTexCoord4dv)(const	GLdouble* v);
typedef	void	(pglTexCoord4f)(GLfloat	s, GLfloat	t, GLfloat	r, GLfloat	q);
typedef	void	(pglTexCoord4fv)(const	GLfloat* v);
typedef	void	(pglTexCoord4i)(GLint	s, GLint	t, GLint	r, GLint	q);
typedef	void	(pglTexCoord4iv)(const	GLint* v);
typedef	void	(pglTexCoord4s)(GLshort	s, GLshort	t, GLshort	r, GLshort	q);
typedef	void	(pglTexCoord4sv)(const	GLshort* v);
typedef	void	(pglTexCoordPointer)(GLint	size, GLenum	type, GLsizei	stride, const	GLvoid* pointer);
typedef	void	(pglTexEnvf)(GLenum	target, GLenum	pname, GLfloat	param);
typedef	void	(pglTexEnvfv)(GLenum	target, GLenum	pname, const	GLfloat* params);
typedef	void	(pglTexEnvi)(GLenum	target, GLenum	pname, GLint	param);
typedef	void	(pglTexEnviv)(GLenum	target, GLenum	pname, const	GLint* params);
typedef	void	(pglTexGend)(GLenum	coord, GLenum	pname, GLdouble	param);
typedef	void	(pglTexGendv)(GLenum	coord, GLenum	pname, const	GLdouble* params);
typedef	void	(pglTexGenf)(GLenum	coord, GLenum	pname, GLfloat	param);
typedef	void	(pglTexGenfv)(GLenum	coord, GLenum	pname, const	GLfloat* params);
typedef	void	(pglTexGeni)(GLenum	coord, GLenum	pname, GLint	param);
typedef	void	(pglTexGeniv)(GLenum	coord, GLenum	pname, const	GLint* params);
typedef	void	(pglTexImage1D)(GLenum	target, GLint	level, GLint	internalformat, GLsizei	width, GLint	border, GLenum	format, GLenum	type, const	GLvoid* pixels);
typedef	void	(pglTexImage2D)(GLenum	target, GLint	level, GLint	internalformat, GLsizei	width, GLsizei	height, GLint	border, GLenum	format, GLenum	type, const	GLvoid* pixels);
typedef	void	(pglTexParameterf)(GLenum	target, GLenum	pname, GLfloat	param);
typedef	void	(pglTexParameterfv)(GLenum	target, GLenum	pname, const	GLfloat* params);
typedef	void	(pglTexParameteri)(GLenum	target, GLenum	pname, GLint	param);
typedef	void	(pglTexParameteriv)(GLenum	target, GLenum	pname, const	GLint* params);
typedef	void	(pglTexSubImage1D)(GLenum	target, GLint	level, GLint	xoffset, GLsizei	width, GLenum	format, GLenum	type, const	GLvoid* pixels);
typedef	void	(pglTexSubImage2D)(GLenum	target, GLint	level, GLint	xoffset, GLint	yoffset, GLsizei	width, GLsizei	height, GLenum	format, GLenum	type, const	GLvoid* pixels);
typedef	void	(pglTranslated)(GLdouble	x, GLdouble	y, GLdouble	z);
typedef	void	(pglTranslatef)(GLfloat	x, GLfloat	y, GLfloat	z);
typedef	void	(pglVertex2d)(GLdouble	x, GLdouble	y);
typedef	void	(pglVertex2dv)(const	GLdouble* v);
typedef	void	(pglVertex2f)(GLfloat	x, GLfloat	y);
typedef	void	(pglVertex2fv)(const	GLfloat* v);
typedef	void	(pglVertex2i)(GLint	x, GLint	y);
typedef	void	(pglVertex2iv)(const	GLint* v);
typedef	void	(pglVertex2s)(GLshort	x, GLshort	y);
typedef	void	(pglVertex2sv)(const	GLshort* v);
typedef	void	(pglVertex3d)(GLdouble	x, GLdouble	y, GLdouble	z);
typedef	void	(pglVertex3dv)(const	GLdouble* v);
typedef	void	(pglVertex3f)(GLfloat	x, GLfloat	y, GLfloat	z);
typedef	void	(pglVertex3fv)(const	GLfloat* v);
typedef	void	(pglVertex3i)(GLint	x, GLint	y, GLint	z);
typedef	void	(pglVertex3iv)(const	GLint* v);
typedef	void	(pglVertex3s)(GLshort	x, GLshort	y, GLshort	z);
typedef	void	(pglVertex3sv)(const	GLshort* v);
typedef	void	(pglVertex4d)(GLdouble	x, GLdouble	y, GLdouble	z, GLdouble	w);
typedef	void	(pglVertex4dv)(const	GLdouble* v);
typedef	void	(pglVertex4f)(GLfloat	x, GLfloat	y, GLfloat	z, GLfloat	w);
typedef	void	(pglVertex4fv)(const	GLfloat* v);
typedef	void	(pglVertex4i)(GLint	x, GLint	y, GLint	z, GLint	w);
typedef	void	(pglVertex4iv)(const	GLint* v);
typedef	void	(pglVertex4s)(GLshort	x, GLshort	y, GLshort	z, GLshort	w);
typedef	void	(pglVertex4sv)(const	GLshort* v);
typedef	void	(pglVertexPointer)(GLint	size, GLenum	type, GLsizei	stride, const	GLvoid* pointer);
typedef	void	(pglViewport)(GLint	x, GLint	y, GLsizei	width, GLsizei	height);


pglAccum* glAccum = NULL;
pglAlphaFunc* glAlphaFunc = NULL;
pglAreTexturesResident* glAreTexturesResident = NULL;
pglArrayElement* glArrayElement = NULL;
pglBegin* glBegin = NULL;
pglBindTexture* glBindTexture = NULL;
pglBitmap* glBitmap = NULL;
pglBlendFunc* glBlendFunc = NULL;
pglCallList* glCallList = NULL;
pglCallLists* glCallLists = NULL;
pglClear* glClear = NULL;
pglClearAccum* glClearAccum = NULL;
pglClearColor* glClearColor = NULL;
pglClearDepth* glClearDepth = NULL;
pglClearIndex* glClearIndex = NULL;
pglClearStencil* glClearStencil = NULL;
pglClipPlane* glClipPlane = NULL;
pglColor3b* glColor3b = NULL;
pglColor3bv* glColor3bv = NULL;
pglColor3d* glColor3d = NULL;
pglColor3dv* glColor3dv = NULL;
pglColor3f* glColor3f = NULL;
pglColor3fv* glColor3fv = NULL;
pglColor3i* glColor3i = NULL;
pglColor3iv* glColor3iv = NULL;
pglColor3s* glColor3s = NULL;
pglColor3sv* glColor3sv = NULL;
pglColor3ub* glColor3ub = NULL;
pglColor3ubv* glColor3ubv = NULL;
pglColor3ui* glColor3ui = NULL;
pglColor3uiv* glColor3uiv = NULL;
pglColor3us* glColor3us = NULL;
pglColor3usv* glColor3usv = NULL;
pglColor4b* glColor4b = NULL;
pglColor4bv* glColor4bv = NULL;
pglColor4d* glColor4d = NULL;
pglColor4dv* glColor4dv = NULL;
pglColor4f* glColor4f = NULL;
pglColor4fv* glColor4fv = NULL;
pglColor4i* glColor4i = NULL;
pglColor4iv* glColor4iv = NULL;
pglColor4s* glColor4s = NULL;
pglColor4sv* glColor4sv = NULL;
pglColor4ub* glColor4ub = NULL;
pglColor4ubv* glColor4ubv = NULL;
pglColor4ui* glColor4ui = NULL;
pglColor4uiv* glColor4uiv = NULL;
pglColor4us* glColor4us = NULL;
pglColor4usv* glColor4usv = NULL;
pglColorMask* glColorMask = NULL;
pglColorMaterial* glColorMaterial = NULL;
pglColorPointer* glColorPointer = NULL;
pglCopyPixels* glCopyPixels = NULL;
pglCopyTexImage1D* glCopyTexImage1D = NULL;
pglCopyTexImage2D* glCopyTexImage2D = NULL;
pglCopyTexSubImage1D* glCopyTexSubImage1D = NULL;
pglCopyTexSubImage2D* glCopyTexSubImage2D = NULL;
pglCullFace* glCullFace = NULL;
pglDeleteLists* glDeleteLists = NULL;
pglDeleteTextures* glDeleteTextures = NULL;
pglDepthFunc* glDepthFunc = NULL;
pglDepthMask* glDepthMask = NULL;
pglDepthRange* glDepthRange = NULL;
pglDisable* glDisable = NULL;
pglDisableClientState* glDisableClientState = NULL;
pglDrawArrays* glDrawArrays = NULL;
pglDrawBuffer* glDrawBuffer = NULL;
pglDrawElements* glDrawElements = NULL;
pglDrawPixels* glDrawPixels = NULL;
pglEdgeFlag* glEdgeFlag = NULL;
pglEdgeFlagPointer* glEdgeFlagPointer = NULL;
pglEdgeFlagv* glEdgeFlagv = NULL;
pglEnable* glEnable = NULL;
pglEnableClientState* glEnableClientState = NULL;
pglEnd* glEnd = NULL;
pglEndList* glEndList = NULL;
pglEvalCoord1d* glEvalCoord1d = NULL;
pglEvalCoord1dv* glEvalCoord1dv = NULL;
pglEvalCoord1f* glEvalCoord1f = NULL;
pglEvalCoord1fv* glEvalCoord1fv = NULL;
pglEvalCoord2d* glEvalCoord2d = NULL;
pglEvalCoord2dv* glEvalCoord2dv = NULL;
pglEvalCoord2f* glEvalCoord2f = NULL;
pglEvalCoord2fv* glEvalCoord2fv = NULL;
pglEvalMesh1* glEvalMesh1 = NULL;
pglEvalMesh2* glEvalMesh2 = NULL;
pglEvalPoint1* glEvalPoint1 = NULL;
pglEvalPoint2* glEvalPoint2 = NULL;
pglFeedbackBuffer* glFeedbackBuffer = NULL;
pglFinish* glFinish = NULL;
pglFlush* glFlush = NULL;
pglFogf* glFogf = NULL;
pglFogfv* glFogfv = NULL;
pglFogi* glFogi = NULL;
pglFogiv* glFogiv = NULL;
pglFrontFace* glFrontFace = NULL;
pglFrustum* glFrustum = NULL;
pglGenLists* glGenLists = NULL;
pglGenTextures* glGenTextures = NULL;
pglGetBooleanv* glGetBooleanv = NULL;
pglGetClipPlane* glGetClipPlane = NULL;
pglGetDoublev* glGetDoublev = NULL;
pglGetError* glGetError = NULL;
pglGetFloatv* glGetFloatv = NULL;
pglGetIntegerv* glGetIntegerv = NULL;
pglGetLightfv* glGetLightfv = NULL;
pglGetLightiv* glGetLightiv = NULL;
pglGetMapdv* glGetMapdv = NULL;
pglGetMapfv* glGetMapfv = NULL;
pglGetMapiv* glGetMapiv = NULL;
pglGetMaterialfv* glGetMaterialfv = NULL;
pglGetMaterialiv* glGetMaterialiv = NULL;
pglGetPixelMapfv* glGetPixelMapfv = NULL;
pglGetPixelMapuiv* glGetPixelMapuiv = NULL;
pglGetPixelMapusv* glGetPixelMapusv = NULL;
pglGetPointerv* glGetPointerv = NULL;
pglGetPolygonStipple* glGetPolygonStipple = NULL;
pglGetString* glGetString = NULL;
pglGetTexEnvfv* glGetTexEnvfv = NULL;
pglGetTexEnviv* glGetTexEnviv = NULL;
pglGetTexGendv* glGetTexGendv = NULL;
pglGetTexGenfv* glGetTexGenfv = NULL;
pglGetTexGeniv* glGetTexGeniv = NULL;
pglGetTexImage* glGetTexImage = NULL;
pglGetTexLevelParameterfv* glGetTexLevelParameterfv = NULL;
pglGetTexLevelParameteriv* glGetTexLevelParameteriv = NULL;
pglGetTexParameterfv* glGetTexParameterfv = NULL;
pglGetTexParameteriv* glGetTexParameteriv = NULL;
pglHint* glHint = NULL;
pglIndexMask* glIndexMask = NULL;
pglIndexPointer* glIndexPointer = NULL;
pglIndexd* glIndexd = NULL;
pglIndexdv* glIndexdv = NULL;
pglIndexf* glIndexf = NULL;
pglIndexfv* glIndexfv = NULL;
pglIndexi* glIndexi = NULL;
pglIndexiv* glIndexiv = NULL;
pglIndexs* glIndexs = NULL;
pglIndexsv* glIndexsv = NULL;
pglIndexub* glIndexub = NULL;
pglIndexubv* glIndexubv = NULL;
pglInitNames* glInitNames = NULL;
pglInterleavedArrays* glInterleavedArrays = NULL;
pglIsEnabled* glIsEnabled = NULL;
pglIsList* glIsList = NULL;
pglIsTexture* glIsTexture = NULL;
pglLightModelf* glLightModelf = NULL;
pglLightModelfv* glLightModelfv = NULL;
pglLightModeli* glLightModeli = NULL;
pglLightModeliv* glLightModeliv = NULL;
pglLightf* glLightf = NULL;
pglLightfv* glLightfv = NULL;
pglLighti* glLighti = NULL;
pglLightiv* glLightiv = NULL;
pglLineStipple* glLineStipple = NULL;
pglLineWidth* glLineWidth = NULL;
pglListBase* glListBase = NULL;
pglLoadIdentity* glLoadIdentity = NULL;
pglLoadMatrixd* glLoadMatrixd = NULL;
pglLoadMatrixf* glLoadMatrixf = NULL;
pglLoadName* glLoadName = NULL;
pglLogicOp* glLogicOp = NULL;
pglMap1d* glMap1d = NULL;
pglMap1f* glMap1f = NULL;
pglMap2d* glMap2d = NULL;
pglMap2f* glMap2f = NULL;
pglMapGrid1d* glMapGrid1d = NULL;
pglMapGrid1f* glMapGrid1f = NULL;
pglMapGrid2d* glMapGrid2d = NULL;
pglMapGrid2f* glMapGrid2f = NULL;
pglMaterialf* glMaterialf = NULL;
pglMaterialfv* glMaterialfv = NULL;
pglMateriali* glMateriali = NULL;
pglMaterialiv* glMaterialiv = NULL;
pglMatrixMode* glMatrixMode = NULL;
pglMultMatrixd* glMultMatrixd = NULL;
pglMultMatrixf* glMultMatrixf = NULL;
pglNewList* glNewList = NULL;
pglNormal3b* glNormal3b = NULL;
pglNormal3bv* glNormal3bv = NULL;
pglNormal3d* glNormal3d = NULL;
pglNormal3dv* glNormal3dv = NULL;
pglNormal3f* glNormal3f = NULL;
pglNormal3fv* glNormal3fv = NULL;
pglNormal3i* glNormal3i = NULL;
pglNormal3iv* glNormal3iv = NULL;
pglNormal3s* glNormal3s = NULL;
pglNormal3sv* glNormal3sv = NULL;
pglNormalPointer* glNormalPointer = NULL;
pglOrtho* glOrtho = NULL;
pglPassThrough* glPassThrough = NULL;
pglPixelMapfv* glPixelMapfv = NULL;
pglPixelMapuiv* glPixelMapuiv = NULL;
pglPixelMapusv* glPixelMapusv = NULL;
pglPixelStoref* glPixelStoref = NULL;
pglPixelStorei* glPixelStorei = NULL;
pglPixelTransferf* glPixelTransferf = NULL;
pglPixelTransferi* glPixelTransferi = NULL;
pglPixelZoom* glPixelZoom = NULL;
pglPointSize* glPointSize = NULL;
pglPolygonMode* glPolygonMode = NULL;
pglPolygonOffset* glPolygonOffset = NULL;
pglPolygonStipple* glPolygonStipple = NULL;
pglPopAttrib* glPopAttrib = NULL;
pglPopClientAttrib* glPopClientAttrib = NULL;
pglPopMatrix* glPopMatrix = NULL;
pglPopName* glPopName = NULL;
pglPrioritizeTextures* glPrioritizeTextures = NULL;
pglPushAttrib* glPushAttrib = NULL;
pglPushClientAttrib* glPushClientAttrib = NULL;
pglPushMatrix* glPushMatrix = NULL;
pglPushName* glPushName = NULL;
pglRasterPos2d* glRasterPos2d = NULL;
pglRasterPos2dv* glRasterPos2dv = NULL;
pglRasterPos2f* glRasterPos2f = NULL;
pglRasterPos2fv* glRasterPos2fv = NULL;
pglRasterPos2i* glRasterPos2i = NULL;
pglRasterPos2iv* glRasterPos2iv = NULL;
pglRasterPos2s* glRasterPos2s = NULL;
pglRasterPos2sv* glRasterPos2sv = NULL;
pglRasterPos3d* glRasterPos3d = NULL;
pglRasterPos3dv* glRasterPos3dv = NULL;
pglRasterPos3f* glRasterPos3f = NULL;
pglRasterPos3fv* glRasterPos3fv = NULL;
pglRasterPos3i* glRasterPos3i = NULL;
pglRasterPos3iv* glRasterPos3iv = NULL;
pglRasterPos3s* glRasterPos3s = NULL;
pglRasterPos3sv* glRasterPos3sv = NULL;
pglRasterPos4d* glRasterPos4d = NULL;
pglRasterPos4dv* glRasterPos4dv = NULL;
pglRasterPos4f* glRasterPos4f = NULL;
pglRasterPos4fv* glRasterPos4fv = NULL;
pglRasterPos4i* glRasterPos4i = NULL;
pglRasterPos4iv* glRasterPos4iv = NULL;
pglRasterPos4s* glRasterPos4s = NULL;
pglRasterPos4sv* glRasterPos4sv = NULL;
pglReadBuffer* glReadBuffer = NULL;
pglReadPixels* glReadPixels = NULL;
pglRectd* glRectd = NULL;
pglRectdv* glRectdv = NULL;
pglRectf* glRectf = NULL;
pglRectfv* glRectfv = NULL;
pglRecti* glRecti = NULL;
pglRectiv* glRectiv = NULL;
pglRects* glRects = NULL;
pglRectsv* glRectsv = NULL;
pglRenderMode* glRenderMode = NULL;
pglRotated* glRotated = NULL;
pglRotatef* glRotatef = NULL;
pglScaled* glScaled = NULL;
pglScalef* glScalef = NULL;
pglScissor* glScissor = NULL;
pglSelectBuffer* glSelectBuffer = NULL;
pglShadeModel* glShadeModel = NULL;
pglStencilFunc* glStencilFunc = NULL;
pglStencilMask* glStencilMask = NULL;
pglStencilOp* glStencilOp = NULL;
pglTexCoord1d* glTexCoord1d = NULL;
pglTexCoord1dv* glTexCoord1dv = NULL;
pglTexCoord1f* glTexCoord1f = NULL;
pglTexCoord1fv* glTexCoord1fv = NULL;
pglTexCoord1i* glTexCoord1i = NULL;
pglTexCoord1iv* glTexCoord1iv = NULL;
pglTexCoord1s* glTexCoord1s = NULL;
pglTexCoord1sv* glTexCoord1sv = NULL;
pglTexCoord2d* glTexCoord2d = NULL;
pglTexCoord2dv* glTexCoord2dv = NULL;
pglTexCoord2f* glTexCoord2f = NULL;
pglTexCoord2fv* glTexCoord2fv = NULL;
pglTexCoord2i* glTexCoord2i = NULL;
pglTexCoord2iv* glTexCoord2iv = NULL;
pglTexCoord2s* glTexCoord2s = NULL;
pglTexCoord2sv* glTexCoord2sv = NULL;
pglTexCoord3d* glTexCoord3d = NULL;
pglTexCoord3dv* glTexCoord3dv = NULL;
pglTexCoord3f* glTexCoord3f = NULL;
pglTexCoord3fv* glTexCoord3fv = NULL;
pglTexCoord3i* glTexCoord3i = NULL;
pglTexCoord3iv* glTexCoord3iv = NULL;
pglTexCoord3s* glTexCoord3s = NULL;
pglTexCoord3sv* glTexCoord3sv = NULL;
pglTexCoord4d* glTexCoord4d = NULL;
pglTexCoord4dv* glTexCoord4dv = NULL;
pglTexCoord4f* glTexCoord4f = NULL;
pglTexCoord4fv* glTexCoord4fv = NULL;
pglTexCoord4i* glTexCoord4i = NULL;
pglTexCoord4iv* glTexCoord4iv = NULL;
pglTexCoord4s* glTexCoord4s = NULL;
pglTexCoord4sv* glTexCoord4sv = NULL;
pglTexCoordPointer* glTexCoordPointer = NULL;
pglTexEnvf* glTexEnvf = NULL;
pglTexEnvfv* glTexEnvfv = NULL;
pglTexEnvi* glTexEnvi = NULL;
pglTexEnviv* glTexEnviv = NULL;
pglTexGend* glTexGend = NULL;
pglTexGendv* glTexGendv = NULL;
pglTexGenf* glTexGenf = NULL;
pglTexGenfv* glTexGenfv = NULL;
pglTexGeni* glTexGeni = NULL;
pglTexGeniv* glTexGeniv = NULL;
pglTexImage1D* glTexImage1D = NULL;
pglTexImage2D* glTexImage2D = NULL;
pglTexParameterf* glTexParameterf = NULL;
pglTexParameterfv* glTexParameterfv = NULL;
pglTexParameteri* glTexParameteri = NULL;
pglTexParameteriv* glTexParameteriv = NULL;
pglTexSubImage1D* glTexSubImage1D = NULL;
pglTexSubImage2D* glTexSubImage2D = NULL;
pglTranslated* glTranslated = NULL;
pglTranslatef* glTranslatef = NULL;
pglVertex2d* glVertex2d = NULL;
pglVertex2dv* glVertex2dv = NULL;
pglVertex2f* glVertex2f = NULL;
pglVertex2fv* glVertex2fv = NULL;
pglVertex2i* glVertex2i = NULL;
pglVertex2iv* glVertex2iv = NULL;
pglVertex2s* glVertex2s = NULL;
pglVertex2sv* glVertex2sv = NULL;
pglVertex3d* glVertex3d = NULL;
pglVertex3dv* glVertex3dv = NULL;
pglVertex3f* glVertex3f = NULL;
pglVertex3fv* glVertex3fv = NULL;
pglVertex3i* glVertex3i = NULL;
pglVertex3iv* glVertex3iv = NULL;
pglVertex3s* glVertex3s = NULL;
pglVertex3sv* glVertex3sv = NULL;
pglVertex4d* glVertex4d = NULL;
pglVertex4dv* glVertex4dv = NULL;
pglVertex4f* glVertex4f = NULL;
pglVertex4fv* glVertex4fv = NULL;
pglVertex4i* glVertex4i = NULL;
pglVertex4iv* glVertex4iv = NULL;
pglVertex4s* glVertex4s = NULL;
pglVertex4sv* glVertex4sv = NULL;
pglVertexPointer* glVertexPointer = NULL;
pglViewport* glViewport = NULL;


#endif     